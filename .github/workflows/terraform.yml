name: 'Terraform'

on:
  push:
    branches:
    - production
  pull_request:
  workflow_dispatch:

env:
  GITHUB_OWNER: condime
  GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}       # Personal Access Token, contact @bencord0 to rotate
  CONSUL_HTTP_TOKEN: ${{ secrets.CONSUL_HTTP_TOKEN }}      # Repository specific, contact @bencord0 to rotate
  ARTIFACT_SECRET_KEY: ${{ secrets.ARTIFACT_SECRET_KEY }}  # Random, e.g. $(uuidgen); not stored, free to rotate at any time

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      run: |
        if command -v terraform 2> /dev/null; then
          terraform --version
        else
          TERRAFORM_RELEASE_TEMP_DIR="$(mktemp -d)"
          TERRAFORM_RELEASE_BIN_DIR="${TF_TEMP_DIR}/$(uuidgen)"
          wget -P "${TERRAFORM_RELEASE_TEMP_DIR}" \
            "https://releases.hashicorp.com/terraform/${TERRAFORM_RELEASE}/terraform_${TERRAFORM_RELEASE}_linux_amd64.zip"

          mkdir -v "${TERRAFORM_RELEASE_BIN_DIR}"
          cd "${TERRAFORM_RELEASE_BIN_DIR}"
          unzip ../terraform_${TERRAFORM_RELEASE}_linux_amd64.zip
          export PATH="${TERRAFORM_RELEASE_BIN_DIR}:${PATH}"

          terraform --version
        fi

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        terraform plan -out ./tfplan.zip
        openssl enc -pass env:ARTIFACT_SECRET_KEY -e -aes-256-ctr -pbkdf2 -in ./tfplan.zip -out tfplan.enc

    # Saves the plan as an artifact
    - name: Save Encrypted Plan
      uses: actions/upload-artifact@v2
      with:
        name: terraform-plan
        path: './tfplan.enc'
        retention-days: 1

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production
    needs: terraform-plan
    if: github.ref == 'refs/heads/production'

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Retrieve the prepared plan
    - name: Download Plan
      uses: actions/download-artifact@v2
      with:
        name: terraform-plan
        path: '.'

    # Use openssl symmetric decryption, as github action artifacts are public
    - name: Decrypt Archived Plan
      run: |
        openssl enc -pass env:ARTIFACT_SECRET_KEY -d -aes-256-ctr -pbkdf2 -in ./tfplan.enc -out tfplan.zip

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      run: |
        if command -v terraform 2> /dev/null; then
          terraform --version
        else
          TERRAFORM_RELEASE_TEMP_DIR="$(mktemp -d)"
          TERRAFORM_RELEASE_BIN_DIR="${TF_TEMP_DIR}/$(uuidgen)"
          wget -P "${TERRAFORM_RELEASE_TEMP_DIR}" \
            "https://releases.hashicorp.com/terraform/${TERRAFORM_RELEASE}/terraform_${TERRAFORM_RELEASE}_linux_amd64.zip"

          mkdir -v "${TERRAFORM_RELEASE_BIN_DIR}"
          cd "${TERRAFORM_RELEASE_BIN_DIR}"
          unzip ../terraform_${TERRAFORM_RELEASE}_linux_amd64.zip
          export PATH="${TERRAFORM_RELEASE_BIN_DIR}:${PATH}"

          terraform --version
        fi

    # Terraform init (again), reload the providers
    - name: Terraform Init
      run: terraform init

    # On push to production or manual change reset infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: terraform apply ./tfplan.zip
